;; -*- scheme -*-
;; Helper functions and macros to be used with LIPS
;;
;; This file is part of the LIPS - Simple lisp in JavaScript
;; Copyriht (C) 2019 Jakub T. Jankiewicz <https://jcubic.pl>
;; Released under MIT license
;;

(define-macro (--> expr . code)
  "Helper macro that simplify calling methods on objects. It work with chaining

   usage: (--> ($ \"body\")
               (css \"color\" \"red\")
               (on \"click\" (lambda () (print \"click\"))))

          (--> document (querySelectorAll \"div\"))"
  (let ((obj (gensym)))
    `(let* ((,obj ,(if (and (symbol? expr) (not (null? (match /\./ (symbol->string expr)))))
                       `(.. ,expr)
                       expr)))
       ,@(map (lambda (code)
                (let ((name (gensym))
                      (fn (gensym)))
                  `(let* ((,name ,(symbol->string (car code)))
                          (,fn (. ,obj ,name)))
                     (if (not (function? ,fn))
                         (error (concat ,name " is not a function"))
                         (set! ,obj (,fn ,@(cdr code)))))))
              code)
       ,obj)))

;; ---------------------------------------------------------------------------------------
(define (single list)
  "(single list)

   Function check if argument is list with single element."
  (and (pair? list) (not (cdr list))))

;; ---------------------------------------------------------------------------------------
(define-macro (.. expr)
  "(.. foo.bar.baz)

   Macro that gets value from nested object where argument is comma separated symbol"
  (if (not (symbol? expr))
      expr
      (let ((parts (split "." (symbol->string expr))))
        (if (single parts)
            expr
            `(. ,(string->symbol (car parts)) ,@(cdr parts))))))

;; ---------------------------------------------------------------------------------------
(define (dir obj)
  "(dir obj)

   Function return all props on the object including those in prototype chain."
  (if (null? obj) nil
      (append (array->list ((. Object "getOwnPropertyNames") (unbind obj)))
              (dir ((. Object "getPrototypeOf") (unbind obj))))))


;; ---------------------------------------------------------------------------------------
(define log (. console "log"))


;; ---------------------------------------------------------------------------------------
(define (symbol->string s)
  "(symbol->string symbol)

   Function convert LIPS symbol to string."
  (if (symbol? s)
      (let ((name (. s "name")))
        (if (string? name)
            name
            (--> name (toString))))))


;; ---------------------------------------------------------------------------------------
(define (as.data obj)
  "(as.data obj)

   Mark object as data to stop evaluation."
  (if (object? obj)
      (begin
        (set-obj! obj 'data true)
        obj)))

;; ---------------------------------------------------------------------------------------
(define (string->symbol string)
  "(string->symbol string)

   Function convert string to LIPS symbol."
  (and (string? string) (as.data (new (. lips "Symbol") string))))

;; ---------------------------------------------------------------------------------------

(define-macro (define-global first . rest)
  "(define-global var value)
   (define-global (name . args) body)

   Macro that define functions or variables in global context, so they can be used
   inside let and get let variables in closure, Useful for universal macros."
  (if (pair? first)
      (let ((name (car first)))
        `(--> (. lips 'env)
              (set ,(symbol->string name) (lambda ,(cdr first) ,@rest))))
      `(--> (. lips 'env) (set ,(symbol->string first) ,(car rest)))))

;; ---------------------------------------------------------------------------------------
(define-macro (globalize expr . rest)
  "(globalize expr)

    Macro will get the value of the expression and add each method as function to global
    scope."
  (let* ((env (current-environment))
         (obj (eval expr env))
         (name (gensym))
         (env-name (gensym))
         (make-name (if (pair? rest)
                        (let ((pre (symbol->string (car rest))))
                          (lambda (name) (string->symbol (concat pre name))))
                        string->symbol)))
    `(let ((,name ,expr))
       ,@(filter pair?
                 (map (lambda (key)
                        (if (and (not (match /^_/ key)) (function? (. obj key)))
                            (let* ((args (gensym)))
                              `(define-global (,(make-name key) . ,args)
                                 (apply (. ,name ,key) ,args)))))
                        (array->list (--> Object (keys obj))))))))

;; ---------------------------------------------------------------------------------------
(define (alist->object alist)
  "(alist->object alist)

   Function convert alist pairs to JavaScript object."
  (if (pair? alist)
      ((. alist "toObject"))))


(define-macro (delay time . expr)
  `(new Promise (value (lambda (resolve)
                         (setTimeout (value (lambda ()
                                              (resolve (begin ,@expr))))
                                     ,time)))))

;; ---------------------------------------------------------------------------------------
(define (pair-map fn seq-list)
  "(seq-map fn list)

   Function call fn argument for pairs in a list and return combined list with
   values returned from function fn. It work like the map but take two items from list"
  (let iter ((seq-list seq-list) (result '()))
    (if (null? seq-list)
        result
        (if (and (pair? seq-list) (pair? (cdr seq-list)))
            (let* ((first (car seq-list))
                   (second (cadr seq-list))
                   (value (fn first second)))
              (if (null? value)
                  (iter (cddr seq-list) result)
                  (iter (cddr seq-list) (cons value result))))))))


;; ---------------------------------------------------------------------------------------
(define (object-expander expr)
  "(object-expander '(:foo (:bar 10) (:baz (1 2 3))))

   Recursive function helper for defining LIPS code for create objects using key like syntax."
  (let ((name (gensym)))
    `(let ((,name (alist->object '())))
       ,@(pair-map (lambda (key value)
                     (if (not (key? key))
                         (error (concat (type key) " " (string key) " is not a string"))
                         (let ((prop (key->string key)))
                           (if (and (pair? value) (key? (car value)))
                             `(set-obj! ,name ,prop ,(object-expander value))
                             `(set-obj! ,name ,prop ,value)))))
                   expr)
       ,name)))

;; ---------------------------------------------------------------------------------------
(define-macro (make-object . expr)
  "(make-object :name value)

   Macro that create JavaScript object using key like syntax."
  (object-expander expr))



;; ---------------------------------------------------------------------------------------
(define (alist->assign desc . sources)
  "(alist->assign alist . list-of-alists)

   Function that work like Object.assign but for LIPS alist."
  (for-each (lambda (source)
              (for-each (lambda (pair)
                          (let* ((key (car pair))
                                 (value (cdr pair))
                                 (d-pair (assoc key desc)))
                            (if (pair? d-pair)
                                (set-cdr! d-pair value)
                                (append! desc (list pair)))))
                        source))
            sources)
  desc)

;; ---------------------------------------------------------------------------------------
(define (key? symbol)
  "(key? symbol)

   Function check if symbol is key symbol, have colon as first character."
  (and (symbol? symbol) (eq? ":" (substring (symbol->string symbol) 0 1))))

;; ---------------------------------------------------------------------------------------
(define (key->string symbol)
  "(key->string symbol)

   If symbol is key it convert that to string - remove colon."
  (if (key? symbol)
      (substring (symbol->string symbol) 1)))

;; ---------------------------------------------------------------------------------------
(define-macro (define-symbol-macro spec . rest)
  "(define-symbol-macro (name . args) . body)

   Macro that creates special symbol macro for evaluator similar to build in , or `.
   It's like alias for real macro. Similar to CL reader macros but it receive already
   parsed code like normal macros."
   ;; this is executed in two different ways one when there are no macro and the other
   ;; if there is macro defined, in second case it will put list as first element
   ;; of the body even is it's called like this (define-symbol-macro (# code)
  (let* ((name (car spec))
         (symbol (cadr spec))
         (args (cddr spec)))
     `(begin
        (add-special! ,symbol ',name)
        (define-macro (,name ,@args) ,@rest))))

;; ---------------------------------------------------------------------------------------
(define-symbol-macro (make-vector "#" arg)
  "(make-vector (1 2 3))
   #(1 2 3)

   Macro for defining vectors (arrays)."
  `(list->array (list ,@arg)))

;; ---------------------------------------------------------------------------------------
(define-macro (module name . body)
  "(module module-name . body)

   Macro for defining modules inside you can use define to create functions.
   And use export name to add that name to defined environment."
  (let ((parent (. (current-environment) 'parent))
        (module-name (gensym)))
    `(let ((,module-name (new (. lips 'Environment) (concat "module-" ,(symbol->string name)))))
       (define-macro (export name) `(--> ,,module-name (set ',name ,name)))
       ,@body
       (--> ,parent (set ',name ,module-name)))))

;; ---------------------------------------------------------------------------------------
(define-macro (import name module)
  "(input function-name module)

   Macro for importing function from module"
  `(define ,name (--> ,module (get ',name))))

;; ---------------------------------------------------------------------------------------
(define-macro (cond . list)
  "(cond (predicate? . body)
         (predicate? . body))

   Macro for condition check. For usage instead of nested ifs."
  (if (pair? list)
      (let* ((item (car list))
             (first (car item))
             (forms (cdr item))
             (rest (cdr list)))
        `(if ,first
             (begin
               ,@forms)
             ,(if (and (pair? rest)
                       (eq? (caar rest) true))
                  `(begin
                     ,@(cdar rest))
                  `(cond ,@rest))))))

;; ---------------------------------------------------------------------------------------
(define (tree-map f tree)
  "(tree-map fn tree)

   Tree version of map. Function is invoked on every leaf."
  (if (pair? tree)
      (cons (tree-map f (car tree)) (tree-map f (cdr tree)))
      (f tree)))

;; ---------------------------------------------------------------------------------------
(define (native.number x)
  "(native.number obj)

   If argument is number it will conver to native number."
  (if (number? x)
      (value x)
      x))

;; ---------------------------------------------------------------------------------------
(define-macro (define-formatter-rule . patterns)
  "(rule-pattern pattern)

   Anaphoric Macro for defining patterns for formatter. With Ahead, Pattern and * defined values."
  (let ((rules (gensym)))
    `(let ((,rules (.. lips.Formatter.rules))
           (Ahead (lambda (pattern)
                    (let ((Ahead (.. lips.Formatter.Ahead)))
                      (new Ahead (if (string? pattern) (new RegExp pattern) pattern)))))
           (* ((.. Symbol.for) "*"))
           (Pattern (lambda (pattern flag)
                      (new (.. lips.Formatter.Pattern) (list->array pattern)
                           (if (null? flag) undefined flag)))))
       ,@(map (lambda (pattern)
                `(--> ,rules (push (tree->array (tree-map native.number ,@pattern)))))
              patterns))))

;; ---------------------------------------------------------------------------------------
(define (compare a b)
  "(compare a b)

   Function that compare two values. it compare lists and any element of the list
   can be a function that will be called with other value. e.g.:
   (compare (list (list 'a) 'b) (list pair? 'b))"
  (cond ((and (pair? a) (pair? b)) (and (compare (car a) (car b))
                                        (compare (cdr a) (cdr b))))
        ((and (array? a) (array? b)) (compare (array->list a) (array->list b)))
        ((and (object? a) (object? b))
         (compare (array->list (--> Object (keys a)))
                  (array->list (--> Object (keys b)))))
        ((eq? (type a) (type b)) (eq? a b))
        ((and (function? a) (not (function? b)))
         (a b))
        ((and (not (function? a)) (function? b))
         (b a))
        (true false)))

;; ---------------------------------------------------------------------------------------
(define-macro (auto-quote arg)
  "(auto-quote list)

   Macro that create list recursively but take symbols from scope"
  (if (pair? arg)
      `(list ,@(map (lambda (item)
                      (if (symbol? item)
                          item
                          (if (pair? item)
                              `(auto-quote ,item)
                              `,item)))
                    arg))
      arg))

;; ---------------------------------------------------------------------------------------
(define-macro (match-pattern expr . list)
  "(match-patternpattern ((pattern . body) ...))

   Pattern matching macro. examples:
   (match-pattern (1 (pair? pair?) 2) ((1 (() ()) 2) (print \"match\")))
   ;; match
   (match-pattern (1 (pair? pair?) 2) ((1 (()) 2) (print \"match\")))
   (match-pattern (1 (pair? pair?) 2) ((1 (()) 2) (print \"match\")) (true \"rest\"))
   ;; rest"
 (if (pair? list)
     (let ((ex-name (gensym)))
       `(let ((,ex-name (auto-quote ,expr)))
          (cond ,@(map (lambda (item)
                         (if (eq? (car item) true)
                             `(true ,(cadr item))
                             `((compare ,ex-name (auto-quote ,(car item))) ,(cadr item))))
                       list))))))

;; ---------------------------------------------------------------------------------------
(define (defmacro? obj)
  "(defmacro? expression)

   Function check if object is macro and it's expandable"
  (and (macro? obj) (. obj 'defmacro)))


(define (assocv key alist)
  (let ((pair (assoc key alist)))
    (if (pair? pair) (cdr pair) undefined)))

;; ---------------------------------------------------------------------------------------
;; formatter rules for cond to break after each S-Expression
;; regex literal /[^)]/ breaks scheme emacs mode so we use string and macro use RegExp constructor
(define-formatter-rule ((list (list "(" "cond" (Pattern (list "(" * ")") "+")) 1 (Ahead "[^)]"))))


;; ---------------------------------------------------------------------------------------
;; LIPS Object System
;; ---------------------------------------------------------------------------------------

(define (class-lambda expr)
  "(class-lambda expr)

   Return lambda expression where input expression lambda have `this` as first argument."
  (let ((args (cdadadr expr)))
    `(lambda (,@args)
       (,(cadr expr) this ,@args))))

;; ---------------------------------------------------------------------------------------
(define-macro (define-class name parent . body)
  "(define-class name parent . body)

   Define class - JavaScript function constructor with prototype."
  (let iter ((functions '()) (constructor nil) (lst body))
    (if (not (null? list))
        (if (not (eq? (caar lst) 'constructor))
            (iter (cons (car lst) functions) nil (cdr lst))
            (let* ((functions (append functions (cdr lst)))
                   (constructor (car lst)))
              `(begin
                 (define ,name ,(class-lambda constructor))
                 (--> Object (defineProperty ,name "name" (make-object :value
                                                                       ,(symbol->string name))))
                 ,(if (not (null? parent))
                      `(set-obj! ,name 'prototype (--> Object (create ,parent))))
                 ,@(map (lambda (fn)
                          `(set-obj! (. ,name 'prototype) ',(car fn) ,(class-lambda fn)))
                        functions)))))))

;; ---------------------------------------------------------------------------------------
(define (make-tags expr)
  "(make-tags expression)

   Function that return list structure of code with better syntax then raw LIPS"
  `(h ,(let ((val (car expr))) (if (key? val) (key->string val) val))
      (alist->object (,'quasiquote ,(pair-map (lambda (car cdr)
                                                `(,(key->string car) . (,'unquote ,cdr)))
                                              (cadr expr))))
      ,(if (not (null? (cddr expr)))
           (if (and (pair? (caddr expr)) (let ((s (caaddr expr)))
                                           (and (symbol? s) (eq? s 'list))))
               `(list->array (list ,@(map make-tags (cdaddr expr))))
               (caddr expr)))))

;; ---------------------------------------------------------------------------------------
(define-macro (with-tags expr)
  "(with-tags expression)

   Macro that evalute LIPS shorter code for S-Expression equivalent of JSX"
  (make-tags expr))
